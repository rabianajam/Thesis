import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), '..'))

from src.state import MealDeliveryMDP
from src.policies.fleet_control.simple_assignment import SimpleAssignmentPolicy
from src.policies.demand_control.simple_proximity import SimpleProximityDemandControl
from src.policies.demand_control.customer_choice_models import simple_customer_choice
import configparser
import numpy as np

if __name__ == "__main__":

    config = configparser.ConfigParser(allow_no_value=True)
    config.read('/content/meal_delivery/data/instances/iowa_110_40_550_800.ini')
    env = MealDeliveryMDP(config, seed=42)
    policy = SimpleAssignmentPolicy()
    demand_policy = SimpleProximityDemandControl(proximity=[10*60]*110, restaurant_nodes=env.restaurant_location_list,
                                                 tt_matrix=env.tt_matrix)

    for i in range(0, 100):

        obs = env.reset()
        last_demand_control_update = 0

        while True:

            # demand control action
            if env.endogenous_choice and obs["new_customer_info"] is not None:

                # update proximity parameter in demand control policy
                if obs["current_time"] >= last_demand_control_update + 600:
                    # calculate new proximity parameters
                    """@Rabia: You only need to change code here. This is where you can adjust the proximity
                    parameters after every 10 minutes. Proximity is given in seconds of travel time.
                    The state information you need to set the proximity parameter are given in the
                    variable called 'obs'. It contains information on customers, vehicles and restaurants."""
                    order_to_vehicle_ratio = len(obs["customer_info"])/len(obs["vehicle_info"])
                    mean_travel_time = np.mean([v["busy_time"] 
                                                for v in obs["vehicle_info"].values()])
                    avg_queue_length = np.mean([len(v["orders_in_queue"]) if v else 0
                                                for v in obs["restaurant_info"].values() ])
                    if avg_queue_length != 0: 
                      relative_queue_length = np.array([len(v["orders_in_queue"]) if v else 0
                                                for v in obs["restaurant_info"].values()])/ avg_queue_length 
                    else:
                      relative_queue_length = np.zeros(110) 

                    demand_policy.proximity = [(20 - 0.001 * order_to_vehicle_ratio-
                                                0.001*mean_travel_time )*60]*110
                    



                    """
                    Everything after this line you do not need to change.
                    """

                demand_action = demand_policy.act(obs)
                obs = env.update_customers_choices(demand_action=demand_action, choice_model=simple_customer_choice)

            # fleet control action and state transition
            action = policy.act(obs)
            obs, cost, done, info = env.step(action)
            if done:
                summary = [i, env.mean_delay, env.total_revenue, env.total_travel_time]
                print("Episode {}. Mean delay {}. Total Revenue {}. Total Travel Time {}.".format(*summary))
                break
